{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nimport copy from 'fast-copy';\nvar UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()\n\n/**\n * isLink Function\n * Checks if the object has sys.type \"Link\"\n * @param object\n */\n\nvar isLink = function isLink(object) {\n  return object && object.sys && object.sys.type === 'Link';\n};\n/**\n * isResourceLink Function\n * Checks if the object has sys.type \"ResourceLink\"\n * @param object\n */\n\n\nvar isResourceLink = function isResourceLink(object) {\n  return object && object.sys && object.sys.type === 'ResourceLink';\n};\n/**\n * Creates a key with spaceId and a key without for entityMap\n *\n * @param {*} sys\n * @param {String} sys.type\n * @param {String} sys.id\n * @param {*} sys.space\n * @param {*} sys.space.sys\n * @param {String} sys.space.id\n * @return {string[]}\n */\n\n\nvar makeEntityMapKeys = function makeEntityMapKeys(sys) {\n  return sys.space ? [sys.type + '!' + sys.id, sys.space.sys.id + '!' + sys.type + '!' + sys.id] : [sys.type + '!' + sys.id];\n};\n/**\n * Looks up in entityMap\n *\n * @param entityMap\n * @param {*} linkData\n * @param {String} linkData.type\n * @param {String} linkData.linkType\n * @param {String} linkData.id\n * @param {String} linkData.urn\n * @return {String}\n */\n\n\nvar lookupInEntityMap = function lookupInEntityMap(entityMap, linkData) {\n  var entryId = linkData.entryId,\n      linkType = linkData.linkType,\n      spaceId = linkData.spaceId;\n\n  if (spaceId) {\n    return entityMap.get(spaceId + '!' + linkType + '!' + entryId);\n  }\n\n  return entityMap.get(linkType + '!' + entryId);\n};\n/**\n * getResolvedLink Function\n *\n * @param entityMap\n * @param link\n * @return {undefined}\n */\n\n\nvar getResolvedLink = function getResolvedLink(entityMap, link) {\n  var _link$sys = link.sys,\n      type = _link$sys.type,\n      linkType = _link$sys.linkType;\n\n  if (type === 'ResourceLink') {\n    var urn = link.sys.urn;\n    var regExp = /.*:spaces\\/([A-Za-z0-9]*)\\/entries\\/([A-Za-z0-9]*)/;\n\n    if (!regExp.test(urn)) {\n      return UNRESOLVED_LINK;\n    }\n\n    var _urn$match = urn.match(regExp),\n        _urn$match2 = _slicedToArray(_urn$match, 3),\n        _ = _urn$match2[0],\n        spaceId = _urn$match2[1],\n        _entryId = _urn$match2[2];\n\n    var extractedLinkType = linkType.split(':')[1];\n    return lookupInEntityMap(entityMap, {\n      linkType: extractedLinkType,\n      entryId: _entryId,\n      spaceId: spaceId\n    }) || UNRESOLVED_LINK;\n  }\n\n  var entryId = link.sys.id;\n  return lookupInEntityMap(entityMap, {\n    linkType: linkType,\n    entryId: entryId\n  }) || UNRESOLVED_LINK;\n};\n/**\n * cleanUpLinks Function\n * - Removes unresolvable links from Arrays and Objects\n *\n * @param {Object[]|Object} input\n */\n\n\nvar cleanUpLinks = function cleanUpLinks(input) {\n  if (Array.isArray(input)) {\n    return input.filter(function (val) {\n      return val !== UNRESOLVED_LINK;\n    });\n  }\n\n  for (var key in input) {\n    if (input[key] === UNRESOLVED_LINK) {\n      delete input[key];\n    }\n  }\n\n  return input;\n};\n/**\n * walkMutate Function\n * @param input\n * @param predicate\n * @param mutator\n * @param removeUnresolved\n * @return {*}\n */\n\n\nvar walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {\n  if (predicate(input)) {\n    return mutator(input);\n  }\n\n  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {\n    for (var key in input) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (input.hasOwnProperty(key)) {\n        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);\n      }\n    }\n\n    if (removeUnresolved) {\n      input = cleanUpLinks(input);\n    }\n  }\n\n  return input;\n};\n\nvar normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {\n  var resolvedLink = getResolvedLink(entityMap, link);\n\n  if (resolvedLink === UNRESOLVED_LINK) {\n    return removeUnresolved ? resolvedLink : link;\n  }\n\n  return resolvedLink;\n};\n\nvar makeEntryObject = function makeEntryObject(item, itemEntryPoints) {\n  if (!Array.isArray(itemEntryPoints)) {\n    return item;\n  }\n\n  var entryPoints = Object.keys(item).filter(function (ownKey) {\n    return itemEntryPoints.indexOf(ownKey) !== -1;\n  });\n  return entryPoints.reduce(function (entryObj, entryPoint) {\n    entryObj[entryPoint] = item[entryPoint];\n    return entryObj;\n  }, {});\n};\n/**\n * resolveResponse Function\n * Resolves contentful response to normalized form.\n * @param {Object} response Contentful response\n * @param {{removeUnresolved: Boolean, itemEntryPoints: Array<String>}|{}} options\n * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false\n * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties\n * @return {Object}\n */\n\n\nvar resolveResponse = function resolveResponse(response, options) {\n  options = options || {};\n\n  if (!response.items) {\n    return [];\n  }\n\n  var responseClone = copy(response);\n  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));\n  }, []);\n  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));\n  var entityMap = new Map(allEntries.reduce(function (acc, entity) {\n    var entries = makeEntityMapKeys(entity.sys).map(function (key) {\n      return [key, entity];\n    });\n    acc.push.apply(acc, _toConsumableArray(entries));\n    return acc;\n  }, []));\n  allEntries.forEach(function (item) {\n    var entryObject = makeEntryObject(item, options.itemEntryPoints);\n    Object.assign(item, walkMutate(entryObject, function (x) {\n      return isLink(x) || isResourceLink(x);\n    }, function (link) {\n      return normalizeLink(entityMap, link, options.removeUnresolved);\n    }, options.removeUnresolved));\n  });\n  return responseClone.items;\n};\n\nexport default resolveResponse;","map":{"version":3,"sources":["/Users/273488/Workspace/My Repo/Code Reference/React App/node_modules/contentful-resolve-response/dist/esm/index.js"],"names":["_typeof","Symbol","iterator","obj","constructor","prototype","_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","_toConsumableArray","arr2","from","copy","UNRESOLVED_LINK","isLink","object","sys","type","isResourceLink","makeEntityMapKeys","space","id","lookupInEntityMap","entityMap","linkData","entryId","linkType","spaceId","get","getResolvedLink","link","_link$sys","urn","regExp","test","_urn$match","match","_urn$match2","_","_entryId","extractedLinkType","split","cleanUpLinks","input","filter","val","key","walkMutate","predicate","mutator","removeUnresolved","hasOwnProperty","normalizeLink","resolvedLink","makeEntryObject","item","itemEntryPoints","entryPoints","keys","ownKey","indexOf","reduce","entryObj","entryPoint","resolveResponse","response","options","items","responseClone","allIncludes","includes","all","concat","allEntries","Map","acc","entity","entries","map","apply","forEach","entryObject","assign","x"],"mappings":"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","sourcesContent":["var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\nimport copy from 'fast-copy';\n\nvar UNRESOLVED_LINK = {}; // unique object to avoid polyfill bloat using Symbol()\n\n/**\n * isLink Function\n * Checks if the object has sys.type \"Link\"\n * @param object\n */\nvar isLink = function isLink(object) {\n  return object && object.sys && object.sys.type === 'Link';\n};\n\n/**\n * isResourceLink Function\n * Checks if the object has sys.type \"ResourceLink\"\n * @param object\n */\nvar isResourceLink = function isResourceLink(object) {\n  return object && object.sys && object.sys.type === 'ResourceLink';\n};\n\n/**\n * Creates a key with spaceId and a key without for entityMap\n *\n * @param {*} sys\n * @param {String} sys.type\n * @param {String} sys.id\n * @param {*} sys.space\n * @param {*} sys.space.sys\n * @param {String} sys.space.id\n * @return {string[]}\n */\nvar makeEntityMapKeys = function makeEntityMapKeys(sys) {\n  return sys.space ? [sys.type + '!' + sys.id, sys.space.sys.id + '!' + sys.type + '!' + sys.id] : [sys.type + '!' + sys.id];\n};\n\n/**\n * Looks up in entityMap\n *\n * @param entityMap\n * @param {*} linkData\n * @param {String} linkData.type\n * @param {String} linkData.linkType\n * @param {String} linkData.id\n * @param {String} linkData.urn\n * @return {String}\n */\nvar lookupInEntityMap = function lookupInEntityMap(entityMap, linkData) {\n  var entryId = linkData.entryId,\n      linkType = linkData.linkType,\n      spaceId = linkData.spaceId;\n\n  if (spaceId) {\n    return entityMap.get(spaceId + '!' + linkType + '!' + entryId);\n  }\n  return entityMap.get(linkType + '!' + entryId);\n};\n\n/**\n * getResolvedLink Function\n *\n * @param entityMap\n * @param link\n * @return {undefined}\n */\nvar getResolvedLink = function getResolvedLink(entityMap, link) {\n  var _link$sys = link.sys,\n      type = _link$sys.type,\n      linkType = _link$sys.linkType;\n\n  if (type === 'ResourceLink') {\n    var urn = link.sys.urn;\n\n    var regExp = /.*:spaces\\/([A-Za-z0-9]*)\\/entries\\/([A-Za-z0-9]*)/;\n    if (!regExp.test(urn)) {\n      return UNRESOLVED_LINK;\n    }\n\n    var _urn$match = urn.match(regExp),\n        _urn$match2 = _slicedToArray(_urn$match, 3),\n        _ = _urn$match2[0],\n        spaceId = _urn$match2[1],\n        _entryId = _urn$match2[2];\n\n    var extractedLinkType = linkType.split(':')[1];\n    return lookupInEntityMap(entityMap, { linkType: extractedLinkType, entryId: _entryId, spaceId: spaceId }) || UNRESOLVED_LINK;\n  }\n  var entryId = link.sys.id;\n\n  return lookupInEntityMap(entityMap, { linkType: linkType, entryId: entryId }) || UNRESOLVED_LINK;\n};\n\n/**\n * cleanUpLinks Function\n * - Removes unresolvable links from Arrays and Objects\n *\n * @param {Object[]|Object} input\n */\nvar cleanUpLinks = function cleanUpLinks(input) {\n  if (Array.isArray(input)) {\n    return input.filter(function (val) {\n      return val !== UNRESOLVED_LINK;\n    });\n  }\n  for (var key in input) {\n    if (input[key] === UNRESOLVED_LINK) {\n      delete input[key];\n    }\n  }\n  return input;\n};\n\n/**\n * walkMutate Function\n * @param input\n * @param predicate\n * @param mutator\n * @param removeUnresolved\n * @return {*}\n */\nvar walkMutate = function walkMutate(input, predicate, mutator, removeUnresolved) {\n  if (predicate(input)) {\n    return mutator(input);\n  }\n\n  if (input && (typeof input === 'undefined' ? 'undefined' : _typeof(input)) === 'object') {\n    for (var key in input) {\n      // eslint-disable-next-line no-prototype-builtins\n      if (input.hasOwnProperty(key)) {\n        input[key] = walkMutate(input[key], predicate, mutator, removeUnresolved);\n      }\n    }\n    if (removeUnresolved) {\n      input = cleanUpLinks(input);\n    }\n  }\n  return input;\n};\n\nvar normalizeLink = function normalizeLink(entityMap, link, removeUnresolved) {\n  var resolvedLink = getResolvedLink(entityMap, link);\n  if (resolvedLink === UNRESOLVED_LINK) {\n    return removeUnresolved ? resolvedLink : link;\n  }\n  return resolvedLink;\n};\n\nvar makeEntryObject = function makeEntryObject(item, itemEntryPoints) {\n  if (!Array.isArray(itemEntryPoints)) {\n    return item;\n  }\n\n  var entryPoints = Object.keys(item).filter(function (ownKey) {\n    return itemEntryPoints.indexOf(ownKey) !== -1;\n  });\n\n  return entryPoints.reduce(function (entryObj, entryPoint) {\n    entryObj[entryPoint] = item[entryPoint];\n    return entryObj;\n  }, {});\n};\n\n/**\n * resolveResponse Function\n * Resolves contentful response to normalized form.\n * @param {Object} response Contentful response\n * @param {{removeUnresolved: Boolean, itemEntryPoints: Array<String>}|{}} options\n * @param {Boolean} options.removeUnresolved - Remove unresolved links default:false\n * @param {Array<String>} options.itemEntryPoints - Resolve links only in those item properties\n * @return {Object}\n */\nvar resolveResponse = function resolveResponse(response, options) {\n  options = options || {};\n  if (!response.items) {\n    return [];\n  }\n  var responseClone = copy(response);\n  var allIncludes = Object.keys(responseClone.includes || {}).reduce(function (all, type) {\n    return [].concat(_toConsumableArray(all), _toConsumableArray(response.includes[type]));\n  }, []);\n\n  var allEntries = [].concat(_toConsumableArray(responseClone.items), _toConsumableArray(allIncludes));\n\n  var entityMap = new Map(allEntries.reduce(function (acc, entity) {\n    var entries = makeEntityMapKeys(entity.sys).map(function (key) {\n      return [key, entity];\n    });\n    acc.push.apply(acc, _toConsumableArray(entries));\n    return acc;\n  }, []));\n\n  allEntries.forEach(function (item) {\n    var entryObject = makeEntryObject(item, options.itemEntryPoints);\n\n    Object.assign(item, walkMutate(entryObject, function (x) {\n      return isLink(x) || isResourceLink(x);\n    }, function (link) {\n      return normalizeLink(entityMap, link, options.removeUnresolved);\n    }, options.removeUnresolved));\n  });\n\n  return responseClone.items;\n};\n\nexport default resolveResponse;"]},"metadata":{},"sourceType":"module"}