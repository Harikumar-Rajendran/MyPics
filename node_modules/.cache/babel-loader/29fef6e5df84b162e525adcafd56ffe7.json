{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/273488/Workspace/My Repo/Code Reference/MyPics/node_modules/@babel/runtime/regenerator/index.js\");\n\nvar _asyncToGenerator = require(\"/Users/273488/Workspace/My Repo/Code Reference/MyPics/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nvar ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi(_ref) {\n  var http = _ref.http,\n      getGlobalOptions = _ref.getGlobalOptions;\n  var wrapSpace = _entities.default.space.wrapSpace;\n  var _entities$default$con = _entities.default.contentType,\n      wrapContentType = _entities$default$con.wrapContentType,\n      wrapContentTypeCollection = _entities$default$con.wrapContentTypeCollection;\n  var _entities$default$ent = _entities.default.entry,\n      wrapEntry = _entities$default$ent.wrapEntry,\n      wrapEntryCollection = _entities$default$ent.wrapEntryCollection;\n  var _entities$default$ass = _entities.default.asset,\n      wrapAsset = _entities$default$ass.wrapAsset,\n      wrapAssetCollection = _entities$default$ass.wrapAssetCollection;\n  var _entities$default$tag = _entities.default.tag,\n      wrapTag = _entities$default$tag.wrapTag,\n      wrapTagCollection = _entities$default$tag.wrapTagCollection;\n  var wrapAssetKey = _entities.default.assetKey.wrapAssetKey;\n  var wrapLocaleCollection = _entities.default.locale.wrapLocaleCollection;\n\n  var notFoundError = function notFoundError(id) {\n    var error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n\n  function errorHandler(error) {\n    if (error.data) {\n      throw error.data;\n    }\n\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    }\n\n    throw error;\n  }\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  function getSpace() {\n    return _getSpace.apply(this, arguments);\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  function _getSpace() {\n    _getSpace = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              switchToSpace(http);\n              _context.prev = 1;\n              _context.next = 4;\n              return http.get('');\n\n            case 4:\n              response = _context.sent;\n              return _context.abrupt(\"return\", wrapSpace(response.data));\n\n            case 8:\n              _context.prev = 8;\n              _context.t0 = _context[\"catch\"](1);\n              errorHandler(_context.t0);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[1, 8]]);\n    }));\n    return _getSpace.apply(this, arguments);\n  }\n\n  function getContentType(_x) {\n    return _getContentType.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  function _getContentType() {\n    _getContentType = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              switchToEnvironment(http);\n              _context2.prev = 1;\n              _context2.next = 4;\n              return http.get(\"content_types/\".concat(id));\n\n            case 4:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", wrapContentType(response.data));\n\n            case 8:\n              _context2.prev = 8;\n              _context2.t0 = _context2[\"catch\"](1);\n              errorHandler(_context2.t0);\n\n            case 11:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[1, 8]]);\n    }));\n    return _getContentType.apply(this, arguments);\n  }\n\n  function getContentTypes() {\n    return _getContentTypes.apply(this, arguments);\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  function _getContentTypes() {\n    _getContentTypes = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var query,\n          response,\n          _args3 = arguments;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              query = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n              switchToEnvironment(http);\n              _context3.prev = 2;\n              _context3.next = 5;\n              return http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 5:\n              response = _context3.sent;\n              return _context3.abrupt(\"return\", wrapContentTypeCollection(response.data));\n\n            case 9:\n              _context3.prev = 9;\n              _context3.t0 = _context3[\"catch\"](2);\n              errorHandler(_context3.t0);\n\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3, null, [[2, 9]]);\n    }));\n    return _getContentTypes.apply(this, arguments);\n  }\n\n  function getEntry(_x2) {\n    return _getEntry.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * .console.log(response.items)\n   */\n\n\n  function _getEntry() {\n    _getEntry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(id) {\n      var query,\n          response,\n          _args4 = arguments;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              query = _args4.length > 1 && _args4[1] !== undefined ? _args4[1] : {};\n\n              if (id) {\n                _context4.next = 3;\n                break;\n              }\n\n              throw notFoundError(id);\n\n            case 3:\n              _context4.prev = 3;\n              _context4.next = 6;\n              return this.getEntries(_objectSpread({\n                'sys.id': id\n              }, query));\n\n            case 6:\n              response = _context4.sent;\n\n              if (!(response.items.length > 0)) {\n                _context4.next = 11;\n                break;\n              }\n\n              return _context4.abrupt(\"return\", wrapEntry(response.items[0]));\n\n            case 11:\n              throw notFoundError(id);\n\n            case 12:\n              _context4.next = 17;\n              break;\n\n            case 14:\n              _context4.prev = 14;\n              _context4.t0 = _context4[\"catch\"](3);\n              errorHandler(_context4.t0);\n\n            case 17:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this, [[3, 14]]);\n    }));\n    return _getEntry.apply(this, arguments);\n  }\n\n  function getEntries() {\n    return _getEntries.apply(this, arguments);\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  function _getEntries() {\n    _getEntries = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var query,\n          _getGlobalOptions2,\n          resolveLinks,\n          removeUnresolved,\n          response,\n          _args5 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              query = _args5.length > 0 && _args5[0] !== undefined ? _args5[0] : {};\n              switchToEnvironment(http);\n              _getGlobalOptions2 = getGlobalOptions(query), resolveLinks = _getGlobalOptions2.resolveLinks, removeUnresolved = _getGlobalOptions2.removeUnresolved;\n              query = (0, _normalizeSelect.default)(query);\n              _context5.prev = 4;\n              _context5.next = 7;\n              return http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 7:\n              response = _context5.sent;\n              return _context5.abrupt(\"return\", wrapEntryCollection(response.data, {\n                resolveLinks: resolveLinks,\n                removeUnresolved: removeUnresolved\n              }));\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](4);\n              errorHandler(_context5.t0);\n\n            case 14:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[4, 11]]);\n    }));\n    return _getEntries.apply(this, arguments);\n  }\n\n  function getAsset(_x3) {\n    return _getAsset.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  function _getAsset() {\n    _getAsset = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(id) {\n      var query,\n          response,\n          _args6 = arguments;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              query = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : {};\n              switchToEnvironment(http);\n              query = (0, _normalizeSelect.default)(query);\n              _context6.prev = 3;\n              _context6.next = 6;\n              return http.get(\"assets/\".concat(id), (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 6:\n              response = _context6.sent;\n              return _context6.abrupt(\"return\", wrapAsset(response.data));\n\n            case 10:\n              _context6.prev = 10;\n              _context6.t0 = _context6[\"catch\"](3);\n              errorHandler(_context6.t0);\n\n            case 13:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6, null, [[3, 10]]);\n    }));\n    return _getAsset.apply(this, arguments);\n  }\n\n  function getAssets() {\n    return _getAssets.apply(this, arguments);\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  function _getAssets() {\n    _getAssets = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var query,\n          response,\n          _args7 = arguments;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              query = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n              switchToEnvironment(http);\n              query = (0, _normalizeSelect.default)(query);\n              _context7.prev = 3;\n              _context7.next = 6;\n              return http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 6:\n              response = _context7.sent;\n              return _context7.abrupt(\"return\", wrapAssetCollection(response.data));\n\n            case 10:\n              _context7.prev = 10;\n              _context7.t0 = _context7[\"catch\"](3);\n              errorHandler(_context7.t0);\n\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7, null, [[3, 10]]);\n    }));\n    return _getAssets.apply(this, arguments);\n  }\n\n  function getTag(_x4) {\n    return _getTag.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  function _getTag() {\n    _getTag = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(id) {\n      var response;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              switchToEnvironment(http);\n              _context8.prev = 1;\n              _context8.next = 4;\n              return http.get(\"tags/\".concat(id));\n\n            case 4:\n              response = _context8.sent;\n              return _context8.abrupt(\"return\", wrapTag(response.data));\n\n            case 8:\n              _context8.prev = 8;\n              _context8.t0 = _context8[\"catch\"](1);\n              errorHandler(_context8.t0);\n\n            case 11:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8, null, [[1, 8]]);\n    }));\n    return _getTag.apply(this, arguments);\n  }\n\n  function getTags() {\n    return _getTags.apply(this, arguments);\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  function _getTags() {\n    _getTags = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var query,\n          response,\n          _args9 = arguments;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              query = _args9.length > 0 && _args9[0] !== undefined ? _args9[0] : {};\n              switchToEnvironment(http);\n              query = (0, _normalizeSelect.default)(query);\n              _context9.prev = 3;\n              _context9.next = 6;\n              return http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 6:\n              response = _context9.sent;\n              return _context9.abrupt(\"return\", wrapTagCollection(response.data));\n\n            case 10:\n              _context9.prev = 10;\n              _context9.t0 = _context9[\"catch\"](3);\n              errorHandler(_context9.t0);\n\n            case 13:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9, null, [[3, 10]]);\n    }));\n    return _getTags.apply(this, arguments);\n  }\n\n  function createAssetKey(_x5) {\n    return _createAssetKey.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  function _createAssetKey() {\n    _createAssetKey = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10(expiresAt) {\n      var now, currentMaxLifetime, params, response;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              switchToEnvironment(http);\n              _context10.prev = 1;\n              now = Math.floor(Date.now() / 1000);\n              currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n              (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n                maximum: currentMaxLifetime,\n                now: now\n              });\n              params = {\n                expiresAt: expiresAt\n              };\n              _context10.next = 8;\n              return http.post('asset_keys', params);\n\n            case 8:\n              response = _context10.sent;\n              return _context10.abrupt(\"return\", wrapAssetKey(response.data));\n\n            case 12:\n              _context10.prev = 12;\n              _context10.t0 = _context10[\"catch\"](1);\n              errorHandler(_context10.t0);\n\n            case 15:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, null, [[1, 12]]);\n    }));\n    return _createAssetKey.apply(this, arguments);\n  }\n\n  function getLocales() {\n    return _getLocales.apply(this, arguments);\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  function _getLocales() {\n    _getLocales = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var query,\n          response,\n          _args11 = arguments;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              query = _args11.length > 0 && _args11[0] !== undefined ? _args11[0] : {};\n              switchToEnvironment(http);\n              _context11.prev = 2;\n              _context11.next = 5;\n              return http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n                query: query\n              }));\n\n            case 5:\n              response = _context11.sent;\n              return _context11.abrupt(\"return\", wrapLocaleCollection(response.data));\n\n            case 9:\n              _context11.prev = 9;\n              _context11.t0 = _context11[\"catch\"](2);\n              errorHandler(_context11.t0);\n\n            case 12:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11, null, [[2, 9]]);\n    }));\n    return _getLocales.apply(this, arguments);\n  }\n\n  function sync() {\n    return _sync.apply(this, arguments);\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function _sync() {\n    _sync = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var query,\n          options,\n          _getGlobalOptions3,\n          resolveLinks,\n          removeUnresolved,\n          _args12 = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              query = _args12.length > 0 && _args12[0] !== undefined ? _args12[0] : {};\n              options = _args12.length > 1 && _args12[1] !== undefined ? _args12[1] : {\n                paginate: true\n              };\n              _getGlobalOptions3 = getGlobalOptions(query), resolveLinks = _getGlobalOptions3.resolveLinks, removeUnresolved = _getGlobalOptions3.removeUnresolved;\n              switchToEnvironment(http);\n              return _context12.abrupt(\"return\", (0, _pagedSync.default)(http, query, _objectSpread({\n                resolveLinks: resolveLinks,\n                removeUnresolved: removeUnresolved\n              }, options)));\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }));\n    return _sync.apply(this, arguments);\n  }\n\n  function parseEntries(data) {\n    var _getGlobalOptions = getGlobalOptions({}),\n        resolveLinks = _getGlobalOptions.resolveLinks,\n        removeUnresolved = _getGlobalOptions.removeUnresolved;\n\n    return wrapEntryCollection(data, {\n      resolveLinks: resolveLinks,\n      removeUnresolved: removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace: getSpace,\n    getContentType: getContentType,\n    getContentTypes: getContentTypes,\n    getEntry: getEntry,\n    getEntries: getEntries,\n    getAsset: getAsset,\n    getAssets: getAssets,\n    getTag: getTag,\n    getTags: getTags,\n    createAssetKey: createAssetKey,\n    getLocales: getLocales,\n    parseEntries: parseEntries,\n    sync: sync\n  };\n}","map":{"version":3,"sources":["/Users/273488/Workspace/My Repo/Code Reference/MyPics/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"names":["Object","defineProperty","exports","value","default","createContentfulApi","_contentfulSdkCore","require","_entities","_interopRequireDefault","_pagedSync","_normalizeSelect","_validateTimestamp","obj","__esModule","ownKeys","object","enumerableOnly","keys","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","configurable","writable","ASSET_KEY_MAX_LIFETIME","http","getGlobalOptions","wrapSpace","space","contentType","wrapContentType","wrapContentTypeCollection","entry","wrapEntry","wrapEntryCollection","asset","wrapAsset","wrapAssetCollection","tag","wrapTag","wrapTagCollection","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","errorHandler","data","response","getSpace","switchToSpace","get","getContentType","switchToEnvironment","getContentTypes","query","createRequestConfig","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = createContentfulApi;\n\nvar _contentfulSdkCore = require(\"contentful-sdk-core\");\n\nvar _entities = _interopRequireDefault(require(\"./entities\"));\n\nvar _pagedSync = _interopRequireDefault(require(\"./paged-sync\"));\n\nvar _normalizeSelect = _interopRequireDefault(require(\"./utils/normalize-select\"));\n\nvar _validateTimestamp = _interopRequireDefault(require(\"./utils/validate-timestamp\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nfunction createContentfulApi({\n  http,\n  getGlobalOptions\n}) {\n  const {\n    wrapSpace\n  } = _entities.default.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = _entities.default.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = _entities.default.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = _entities.default.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = _entities.default.tag;\n  const {\n    wrapAssetKey\n  } = _entities.default.assetKey;\n  const {\n    wrapLocaleCollection\n  } = _entities.default.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n\n  function errorHandler(error) {\n    if (error.data) {\n      throw error.data;\n    }\n\n    if (error.response && error.response.data) {\n      throw error.response.data;\n    }\n\n    throw error;\n  }\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  async function getSpace() {\n    switchToSpace(http);\n\n    try {\n      const response = await http.get('');\n      return wrapSpace(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  async function getContentType(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  async function getContentTypes(query = {}) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('content_types', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  async function getEntry(id, query = {}) {\n    if (!id) {\n      throw notFoundError(id);\n    }\n\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * .console.log(response.items)\n   */\n\n\n  async function getEntries(query = {}) {\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('entries', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  async function getAsset(id, query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get(`assets/${id}`, (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  async function getAssets(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('assets', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  async function getTag(id) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  async function getTags(query = {}) {\n    switchToEnvironment(http);\n    query = (0, _normalizeSelect.default)(query);\n\n    try {\n      const response = await http.get('tags', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      (0, _validateTimestamp.default)('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  async function getLocales(query = {}) {\n    switchToEnvironment(http);\n\n    try {\n      const response = await http.get('locales', (0, _contentfulSdkCore.createRequestConfig)({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  async function sync(query = {}, options = {\n    paginate: true\n  }) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return (0, _pagedSync.default)(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}"]},"metadata":{},"sourceType":"script"}